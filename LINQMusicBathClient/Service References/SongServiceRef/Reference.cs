//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQMusicBathClient.SongServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Song", Namespace="http://schemas.datacontract.org/2004/07/LINQMusicBathService")]
    [System.SerializableAttribute()]
    public partial class Song : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RowVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SongIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SongNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion {
            get {
                return this.RowVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.RowVersionField, value) != true)) {
                    this.RowVersionField = value;
                    this.RaisePropertyChanged("RowVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SongID {
            get {
                return this.SongIDField;
            }
            set {
                if ((this.SongIDField.Equals(value) != true)) {
                    this.SongIDField = value;
                    this.RaisePropertyChanged("SongID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SongName {
            get {
                return this.SongNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SongNameField, value) != true)) {
                    this.SongNameField = value;
                    this.RaisePropertyChanged("SongName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SongFault", Namespace="http://schemas.datacontract.org/2004/07/LINQMusicBathService")]
    [System.SerializableAttribute()]
    public partial class SongFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage {
            get {
                return this.FaultMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultMessageField, value) != true)) {
                    this.FaultMessageField = value;
                    this.RaisePropertyChanged("FaultMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SongServiceRef.ISongService")]
    public interface ISongService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongService/GetSong", ReplyAction="http://tempuri.org/ISongService/GetSongResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LINQMusicBathClient.SongServiceRef.SongFault), Action="http://tempuri.org/ISongService/GetSongSongFaultFault", Name="SongFault", Namespace="http://schemas.datacontract.org/2004/07/LINQMusicBathService")]
        LINQMusicBathClient.SongServiceRef.Song GetSong(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongService/GetSong", ReplyAction="http://tempuri.org/ISongService/GetSongResponse")]
        System.Threading.Tasks.Task<LINQMusicBathClient.SongServiceRef.Song> GetSongAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongService/UpdateSong", ReplyAction="http://tempuri.org/ISongService/UpdateSongResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LINQMusicBathClient.SongServiceRef.SongFault), Action="http://tempuri.org/ISongService/UpdateSongSongFaultFault", Name="SongFault", Namespace="http://schemas.datacontract.org/2004/07/LINQMusicBathService")]
        LINQMusicBathClient.SongServiceRef.UpdateSongResponse UpdateSong(LINQMusicBathClient.SongServiceRef.UpdateSongRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongService/UpdateSong", ReplyAction="http://tempuri.org/ISongService/UpdateSongResponse")]
        System.Threading.Tasks.Task<LINQMusicBathClient.SongServiceRef.UpdateSongResponse> UpdateSongAsync(LINQMusicBathClient.SongServiceRef.UpdateSongRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateSong", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateSongRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public LINQMusicBathClient.SongServiceRef.Song song;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string message;
        
        public UpdateSongRequest() {
        }
        
        public UpdateSongRequest(LINQMusicBathClient.SongServiceRef.Song song, string message) {
            this.song = song;
            this.message = message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateSongResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpdateSongResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UpdateSongResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public LINQMusicBathClient.SongServiceRef.Song song;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string message;
        
        public UpdateSongResponse() {
        }
        
        public UpdateSongResponse(bool UpdateSongResult, LINQMusicBathClient.SongServiceRef.Song song, string message) {
            this.UpdateSongResult = UpdateSongResult;
            this.song = song;
            this.message = message;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISongServiceChannel : LINQMusicBathClient.SongServiceRef.ISongService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SongServiceClient : System.ServiceModel.ClientBase<LINQMusicBathClient.SongServiceRef.ISongService>, LINQMusicBathClient.SongServiceRef.ISongService {
        
        public SongServiceClient() {
        }
        
        public SongServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SongServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SongServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SongServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LINQMusicBathClient.SongServiceRef.Song GetSong(int id) {
            return base.Channel.GetSong(id);
        }
        
        public System.Threading.Tasks.Task<LINQMusicBathClient.SongServiceRef.Song> GetSongAsync(int id) {
            return base.Channel.GetSongAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LINQMusicBathClient.SongServiceRef.UpdateSongResponse LINQMusicBathClient.SongServiceRef.ISongService.UpdateSong(LINQMusicBathClient.SongServiceRef.UpdateSongRequest request) {
            return base.Channel.UpdateSong(request);
        }
        
        public bool UpdateSong(ref LINQMusicBathClient.SongServiceRef.Song song, ref string message) {
            LINQMusicBathClient.SongServiceRef.UpdateSongRequest inValue = new LINQMusicBathClient.SongServiceRef.UpdateSongRequest();
            inValue.song = song;
            inValue.message = message;
            LINQMusicBathClient.SongServiceRef.UpdateSongResponse retVal = ((LINQMusicBathClient.SongServiceRef.ISongService)(this)).UpdateSong(inValue);
            song = retVal.song;
            message = retVal.message;
            return retVal.UpdateSongResult;
        }
        
        public System.Threading.Tasks.Task<LINQMusicBathClient.SongServiceRef.UpdateSongResponse> UpdateSongAsync(LINQMusicBathClient.SongServiceRef.UpdateSongRequest request) {
            return base.Channel.UpdateSongAsync(request);
        }
    }
}
